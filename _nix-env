#compdef nix-env
#autoload

_nix-common-options

local -a _1st_arguments
_1st_arguments=(
  {--install,-i}":Install package"\
  {--upgrade,-u}":Upgrade package"\
  {--uninstall,-e}":Uninstall package"\
  "--set-flag:Modify meta attribute of installed package"\
  {--query,-q}":List information about derivations"\
  {--switch-profile,-S}":Set the current profile path"\
  "--list-generations:Print a list of all generations in the active profile"\
  "--delete-generations:Delete specified generations"\
  {--switch-generation,-G}":Activate specified generation"\
  "--rollback:Switch to the previous generation of active profile"
  )

local -a _nix_env_common_opts
_nix_env_common_opts=(
  $_nix_common_opts \
  '(--file -f)'{--file,-f}'[Specify Nix expression used to obtain derivations]:Path to file:_nix_complete_dotnix_files'\
  '(--profile -p)'{--profile,-p}'[Specify the profile to use]:Path:_nix_profiles'\
  $_nix_dry_run \
  '--system-filter[Only show derivations matching the specified platform]:system:_nix_systems'\
  '*:Package:_nix_attr_paths'\
)

local -a _nix_env_b
_nix_env_b=('(--prebuilt-only -b)'{--prebuilt-only,-b}'[Fail if there is no pre-built binary available]')

local _nix_env_from_profile
_nix_env_from_profile='--from-profile[Fetch store paths from another profile]:Profile:_nix_profiles'

_arguments \
    $_nix_env_common_opts \
    - '(actions)' \
    {--install,-i}"[Install package]"\
    {--upgrade,-u}"[Upgrade package]"\
    {--uninstall,-e}"[Uninstall package]"\
    "--set-flag:Modify meta attribute of installed package"\
    {--query,-q}":List information about derivations"\
    {--switch-profile,-S}":Set the current profile path:_nix_profiles"\
    "--list-generations:Print a list of all generations in the active profile"\
    "--delete-generations:Delete specified generations"\
    {--switch-generation,-G}":Activate specified generation:_nix_generations"\
    "--rollback:Switch to the previous generation of active profile" \
